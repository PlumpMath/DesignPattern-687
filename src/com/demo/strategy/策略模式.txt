1.定义：
它定义了算法家族，并分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的用户。
2.角色
环境角色：持有一个Strategy的引用
抽象策略（Strategy）角色：这是一个抽象角色，通常由一个借口或抽象类实现。此角色给出所有的具体策略类所需的接口。
具体策略（ConcreteStrategy）角色：包装了相关的算法或行为
3.优点
策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码移到父类里面。从而避免代码重复。
使用策略模式可以避免使用多重条件（if-else）语句。多重条件语句不易维护，它把采取哪一种算法或采取哪一种行为的逻辑与算法或行为的逻辑混合在一起，统统列在一个多重条件语句里面，比使用继承的办法还要原始和落后。
4.缺点
由于策略模式把每一个具体的策略实现都单独封装成为类，如果备选的策略很多的话，那么对象的数目就会很可观。
